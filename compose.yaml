# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.8'
services:
  db:
    image: mysql:latest
    container_name: vinaymysql
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: test
      MYSQL_USER: admin
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - dbdata:/var/lib/mysql
    restart: always
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: fileoperations
    ports:
      - 8081:8080
    depends_on:
      - db
    container_name: fileoperations
    environment:
      - spring.servlet.multipart.max-file-size=50MB
      - spring.servlet.multipart.max-request-size=50MB
      - spring.datasource.url=jdbc:mysql://vinaymysql:3306/test?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false
      - spring.datasource.username=admin
      - spring.datasource.password=root
      - spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      - spring.jpa.generate-ddl=true
      - spring.jpa.hibernate.ddl-auto=create
      - spring.jpa.database=default
      - spring.jpa.show-sql=true
    restart: always
volumes: 
  dbdata:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # db:
  #   image: mysl
  #   restart: always
  #   user: root
  #   secrets:
  #     - root
#     volumes:
#       - db-data:/var/lib/postgresql/data
    # environment:
    #   - MYSQL_ROOT_PASSWORD=root
    # expose:
    #   - 3307
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

